valid/function/simple_functions/functionMultiReturns.wacc
calling the reference compiler on valid/function/simple_functions/functionMultiReturns.wacc
-- Test: functionMultiReturns.wacc

-- Uploaded file: 
---------------------------------------------------------------
# a simple function with multiple returns, importantly one at the end.

# Output:
# 1

# Program:

begin
  int returnInWhile() is
    while true do
      return 1 ;
      println "How on Earth did we get here?"
    done ;
    return 2
  end

  int x = call returnInWhile() ;
  println x
end
---------------------------------------------------------------

-- Compiler Output:
-- Compiling...
-- Printing Assembly...
functionMultiReturns.s contents are:
===========================================================
0	.data
1	
2	msg_0:
3		.word 29
4		.ascii	"How on Earth did we get here?"
5	msg_1:
6		.word 5
7		.ascii	"%.*s\0"
8	msg_2:
9		.word 1
10		.ascii	"\0"
11	msg_3:
12		.word 3
13		.ascii	"%d\0"
14	
15	.text
16	
17	.global main
18	f_returnInWhile:
19		PUSH {lr}
20		B L0
21	L1:
22		LDR r4, =1
23		MOV r0, r4
24		POP {pc}
25		LDR r4, =msg_0
26		MOV r0, r4
27		BL p_print_string
28		BL p_print_ln
29	L0:
30		MOV r4, #1
31		CMP r4, #1
32		BEQ L1
33		LDR r4, =2
34		MOV r0, r4
35		POP {pc}
36		POP {pc}
37		.ltorg
38	main:
39		PUSH {lr}
40		SUB sp, sp, #4
41		BL f_returnInWhile
42		MOV r4, r0
43		STR r4, [sp]
44		LDR r4, [sp]
45		MOV r0, r4
46		BL p_print_int
47		BL p_print_ln
48		ADD sp, sp, #4
49		LDR r0, =0
50		POP {pc}
51		.ltorg
52	p_print_string:
53		PUSH {lr}
54		LDR r1, [r0]
55		ADD r2, r0, #4
56		LDR r0, =msg_1
57		ADD r0, r0, #4
58		BL printf
59		MOV r0, #0
60		BL fflush
61		POP {pc}
62	p_print_ln:
63		PUSH {lr}
64		LDR r0, =msg_2
65		ADD r0, r0, #4
66		BL puts
67		MOV r0, #0
68		BL fflush
69		POP {pc}
70	p_print_int:
71		PUSH {lr}
72		MOV r1, r0
73		LDR r0, =msg_3
74		ADD r0, r0, #4
75		BL printf
76		MOV r0, #0
77		BL fflush
78		POP {pc}
79	
===========================================================
-- Finished

