valid/expressions/equalsOverAnd.wacc
calling the reference compiler on valid/expressions/equalsOverAnd.wacc
-- Test: equalsOverAnd.wacc

-- Uploaded file: 
---------------------------------------------------------------
# evaluating equality and boolean operator precedence

# Output:
# false
# true

# Program:

begin
  bool p = false ;
  bool q = true ;
  bool r = false ;
  println p == q && r ;
  println p == (q && r)
end
---------------------------------------------------------------

-- Compiler Output:
-- Compiling...
-- Printing Assembly...
equalsOverAnd.s contents are:
===========================================================
0	.data
1	
2	msg_0:
3		.word 5
4		.ascii	"true\0"
5	msg_1:
6		.word 6
7		.ascii	"false\0"
8	msg_2:
9		.word 1
10		.ascii	"\0"
11	
12	.text
13	
14	.global main
15	main:
16		PUSH {lr}
17		SUB sp, sp, #3
18		MOV r4, #0
19		STRB r4, [sp, #2]
20		MOV r4, #1
21		STRB r4, [sp, #1]
22		MOV r4, #0
23		STRB r4, [sp]
24		LDRSB r4, [sp, #2]
25		LDRSB r5, [sp, #1]
26		CMP r4, r5
27		MOVEQ r4, #1
28		MOVNE r4, #0
29		LDRSB r5, [sp]
30		AND r4, r4, r5
31		MOV r0, r4
32		BL p_print_bool
33		BL p_print_ln
34		LDRSB r4, [sp, #2]
35		LDRSB r5, [sp, #1]
36		LDRSB r6, [sp]
37		AND r5, r5, r6
38		CMP r4, r5
39		MOVEQ r4, #1
40		MOVNE r4, #0
41		MOV r0, r4
42		BL p_print_bool
43		BL p_print_ln
44		ADD sp, sp, #3
45		LDR r0, =0
46		POP {pc}
47		.ltorg
48	p_print_bool:
49		PUSH {lr}
50		CMP r0, #0
51		LDRNE r0, =msg_0
52		LDREQ r0, =msg_1
53		ADD r0, r0, #4
54		BL printf
55		MOV r0, #0
56		BL fflush
57		POP {pc}
58	p_print_ln:
59		PUSH {lr}
60		LDR r0, =msg_2
61		ADD r0, r0, #4
62		BL puts
63		MOV r0, #0
64		BL fflush
65		POP {pc}
66	
===========================================================
-- Finished

